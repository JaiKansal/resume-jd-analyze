#!/usr/bin/env python3
"""
Final comprehensive fix - addresses all remaining issues
"""

import logging
import sqlite3
import json

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_with_real_user():
    """Test the history display with the real user who has analyses"""
    logger.info("üß™ Testing with real user data...")
    
    try:
        from database.connection import get_db
        db = get_db()
        
        # Get the real user who has analyses
        users = db.execute_query("""
            SELECT DISTINCT user_id, COUNT(*) as analysis_count
            FROM analysis_sessions 
            GROUP BY user_id
            ORDER BY analysis_count DESC
            LIMIT 1
        """)
        
        if not users:
            logger.warning("No users with analyses found")
            return False
        
        real_user_id = users[0]['user_id']
        logger.info(f"Testing with user: {real_user_id[:8]}...")
        
        # Test the enhanced analysis storage
        try:
            from database.enhanced_analysis_storage import enhanced_analysis_storage
            reports = enhanced_analysis_storage.get_user_reports(real_user_id)
            logger.info(f"‚úÖ Enhanced storage returned {len(reports)} reports")
            
            if reports:
                for report in reports:
                    logger.info(f"   ‚Ä¢ {report['title']} - {report['created_at'][:10]}")
            
        except Exception as e:
            logger.error(f"‚ùå Enhanced storage test failed: {e}")
            return False
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Real user test failed: {e}")
        return False

def create_simple_working_history():
    """Create a simple working history function that definitely works"""
    logger.info("üîß Creating simple working history function...")
    
    simple_history = '''
def render_simple_working_history(user):
    """Simple history that definitely works - no fancy features"""
    st.title("üìä Analysis History")
    
    try:
        import sqlite3
        
        # Direct database connection
        conn = sqlite3.connect('data/app.db')
        conn.row_factory = sqlite3.Row
        cursor = conn.cursor()
        
        # Simple query
        cursor.execute("""
            SELECT id, resume_filename, score, match_category, created_at, analysis_result
            FROM analysis_sessions 
            WHERE user_id = ? 
            ORDER BY created_at DESC 
            LIMIT 20
        """, (user.id,))
        
        sessions = cursor.fetchall()
        conn.close()
        
        if not sessions:
            st.info("üìù No analysis history found. Run your first analysis to see results here!")
            st.info(f"üí° Looking for analyses for user: {user.id[:8]}...")
            return
        
        st.success(f"üìä Found {len(sessions)} analysis sessions")
        
        # Display each session
        for i, session in enumerate(sessions):
            session_id = session['id']
            filename = session['resume_filename'] or 'Unknown File'
            score = session['score'] or 0
            category = session['match_category'] or 'Unknown'
            created_at = session['created_at'] or 'Unknown Date'
            analysis_result = session['analysis_result'] or 'No analysis available'
            
            # Format date
            if isinstance(created_at, str) and len(created_at) > 10:
                display_date = created_at[:10]
            else:
                display_date = str(created_at)
            
            with st.expander(f"üìÑ {filename} - {score}% - {display_date}", expanded=False):
                col1, col2 = st.columns([3, 1])
                
                with col1:
                    st.write(f"**Score:** {score}%")
                    st.write(f"**Category:** {category}")
                    st.write(f"**Date:** {created_at}")
                
                with col2:
                    # Simple download button
                    report_content = f"""RESUME ANALYSIS REPORT
{'='*50}

Resume: {filename}
Analysis Date: {created_at}
Compatibility Score: {score}%
Match Category: {category}

DETAILED ANALYSIS:
{'-'*20}
{analysis_result}

Generated by Resume + JD Analyzer
"""
                    
                    st.download_button(
                        label="üìÑ Download",
                        data=report_content,
                        file_name=f"analysis_{session_id[:8]}.txt",
                        mime="text/plain",
                        key=f"simple_download_{session_id}_{i}"
                    )
                
                # Show analysis content
                if analysis_result and len(analysis_result) > 10:
                    if len(analysis_result) > 500:
                        preview = analysis_result[:500] + "..."
                        st.text_area("Analysis Preview:", preview, height=150, key=f"preview_{session_id}_{i}", disabled=True)
                        
                        if st.checkbox("Show full analysis", key=f"full_{session_id}_{i}"):
                            st.text_area("Full Analysis:", analysis_result, height=400, key=f"full_analysis_{session_id}_{i}", disabled=True)
                    else:
                        st.text_area("Analysis:", analysis_result, height=200, key=f"analysis_{session_id}_{i}", disabled=True)
    
    except Exception as e:
        st.error(f"‚ùå Failed to load analysis history: {e}")
        st.info("üí° Please try refreshing the page or contact support.")
        logger.error(f"Simple history error: {e}")
'''
    
    # Add to app.py
    with open("app.py", "a") as f:
        f.write(simple_history)
    
    logger.info("‚úÖ Added simple working history function")
    return True

def update_main_app_function():
    """Update the main app to use the simple working history"""
    logger.info("üîß Updating main app to use simple working history...")
    
    try:
        with open("app.py", 'r') as f:
            content = f.read()
        
        # Find and replace the history function call
        if "render_analysis_history_robust(user)" in content:
            content = content.replace(
                "render_analysis_history_robust(user)",
                "render_simple_working_history(user)"
            )
        elif "render_analysis_history(user)" in content:
            content = content.replace(
                "render_analysis_history(user)",
                "render_simple_working_history(user)"
            )
        
        with open("app.py", 'w') as f:
            f.write(content)
        
        logger.info("‚úÖ Updated main app to use simple working history")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Failed to update main app: {e}")
        return False

def verify_all_fixes():
    """Verify all fixes are in place"""
    logger.info("üîç Verifying all fixes...")
    
    checks = []
    
    # Check watermark service
    try:
        with open("billing/watermark_service.py", 'r') as f:
            watermark_content = f.read()
        
        if "drawCentredString" not in watermark_content:
            checks.append("‚úÖ Watermark service fixed")
        else:
            checks.append("‚ùå Watermark service still has issues")
    except:
        checks.append("‚ùå Watermark service check failed")
    
    # Check engagement events
    try:
        with open("analytics/user_engagement.py", 'r') as f:
            analytics_content = f.read()
        
        if "parameters, created_at" in analytics_content:
            checks.append("‚úÖ Engagement events query fixed")
        else:
            checks.append("‚ùå Engagement events query still has issues")
    except:
        checks.append("‚ùå Engagement events check failed")
    
    # Check enhanced analysis storage
    try:
        with open("database/enhanced_analysis_storage.py", 'r') as f:
            storage_content = f.read()
        
        if "def get_user_reports" in storage_content:
            checks.append("‚úÖ Enhanced analysis storage has get_user_reports method")
        else:
            checks.append("‚ùå Enhanced analysis storage missing get_user_reports method")
    except:
        checks.append("‚ùå Enhanced analysis storage check failed")
    
    # Check app.py has simple working history
    try:
        with open("app.py", 'r') as f:
            app_content = f.read()
        
        if "render_simple_working_history" in app_content:
            checks.append("‚úÖ App.py has simple working history function")
        else:
            checks.append("‚ùå App.py missing simple working history function")
    except:
        checks.append("‚ùå App.py check failed")
    
    for check in checks:
        logger.info(check)
    
    success_count = len([c for c in checks if c.startswith("‚úÖ")])
    total_count = len(checks)
    
    return success_count == total_count

def main():
    """Run final comprehensive fix"""
    logger.info("üöÄ Running final comprehensive fix...")
    
    fixes = [
        ("Test with Real User", test_with_real_user),
        ("Create Simple Working History", create_simple_working_history),
        ("Update Main App Function", update_main_app_function),
        ("Verify All Fixes", verify_all_fixes)
    ]
    
    passed = 0
    total = len(fixes)
    
    for fix_name, fix_func in fixes:
        logger.info(f"\n--- {fix_name} ---")
        if fix_func():
            passed += 1
            logger.info(f"‚úÖ {fix_name} completed successfully")
        else:
            logger.error(f"‚ùå {fix_name} failed")
    
    logger.info(f"\nüéØ Final Results: {passed}/{total} fixes completed successfully")
    
    if passed == total:
        logger.info("üéâ ALL ISSUES SHOULD NOW BE FIXED!")
        logger.info("üîÑ Please restart your Streamlit app and test:")
        logger.info("   1. Go to Analysis History page")
        logger.info("   2. You should see your analysis sessions")
        logger.info("   3. Download buttons should work without causing disappearing")
        logger.info("   4. No more database or watermark errors in logs")
    else:
        logger.warning("‚ö†Ô∏è Some fixes incomplete - check logs above")

if __name__ == "__main__":
    main()