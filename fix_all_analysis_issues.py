#!/usr/bin/env python3
"""
Fix all analysis issues: storage, history display, and download disappearing
"""

import re
import os

def fix_analysis_storage_completely():
    """Fix analysis storage to ensure it actually saves to database"""
    print("üîß FIXING ANALYSIS STORAGE COMPLETELY")
    print("=" * 40)
    
    try:
        with open('app.py', 'r') as f:
            content = f.read()
        
        # Find the save_analysis_with_history function and replace it completely
        old_function_pattern = r'def save_analysis_with_history\([^}]+?\n    return analysis_id'
        
        new_function = '''def save_analysis_with_history(user_id: str, resume_filename: str, resume_content: str,
                              job_description: str, analysis_result: dict, 
                              processing_time: float = 0):
    """Save analysis with enhanced storage and history tracking - GUARANTEED DATABASE SAVE"""
    
    analysis_id = None
    
    # ALWAYS save to database using direct method first
    try:
        analysis_id = save_analysis_direct_to_database(
            user_id, resume_filename, resume_content, 
            job_description, analysis_result, processing_time
        )
        
        if analysis_id:
            st.success("‚úÖ Analysis saved to your history!")
            logger.info(f"Analysis saved to database: {analysis_id}")
        else:
            logger.error("Direct database save failed")
    except Exception as e:
        logger.error(f"Direct database save failed: {e}")
    
    # Try enhanced storage as backup
    if not analysis_id and ANALYSIS_STORAGE_AVAILABLE and enhanced_analysis_storage:
        try:
            analysis_id = enhanced_analysis_storage.save_analysis(
                user_id=user_id,
                resume_filename=resume_filename,
                resume_content=resume_content,
                job_description=job_description,
                analysis_result=analysis_result,
                processing_time=processing_time
            )
            
            if analysis_id:
                st.success("‚úÖ Analysis saved to your history!")
                logger.info(f"Analysis saved via enhanced storage: {analysis_id}")
        except Exception as e:
            logger.error(f"Enhanced storage also failed: {e}")
    
    # Always save to session state as immediate backup
    if 'analysis_results' not in st.session_state:
        st.session_state.analysis_results = []
    st.session_state.analysis_results.append((resume_filename, analysis_result))
    
    # Show stats if we have enhanced services
    if analysis_id and ENHANCED_SERVICES_AVAILABLE:
        try:
            with st.expander("üìä Your Analysis Stats"):
                stats = enhanced_analysis_storage.get_user_statistics(user_id)
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    st.metric("Total Analyses", stats.get('total_analyses', 0))
                with col2:
                    st.metric("Average Score", f"{stats.get('avg_score', 0):.1f}%")
                with col3:
                    st.metric("Best Score", f"{stats.get('best_score', 0)}%")
        except Exception as e:
            logger.warning(f"Could not show analysis stats: {e}")
    
    if not analysis_id:
        st.warning("‚ö†Ô∏è Analysis saved to session only (may not persist)")
        logger.error("All analysis storage methods failed")
    
    return analysis_id'''
        
        # Replace the function
        if re.search(old_function_pattern, content, re.DOTALL):
            content = re.sub(old_function_pattern, new_function, content, flags=re.DOTALL)
            print("‚úÖ Replaced save_analysis_with_history function")
        else:
            print("‚ö†Ô∏è Could not find function to replace, adding new one")
            # Add before check_setup function
            insert_point = content.find('def check_setup():')
            if insert_point != -1:
                content = content[:insert_point] + new_function + '\n\n' + content[insert_point:]
        
        with open('app.py', 'w') as f:
            f.write(content)
        
        print("‚úÖ Analysis storage function completely fixed")
        return True
        
    except Exception as e:
        print(f"‚ùå Error fixing analysis storage: {e}")
        return False

def fix_analysis_history_display():
    """Fix analysis history display to show saved analyses"""
    print("\nüîß FIXING ANALYSIS HISTORY DISPLAY")
    print("=" * 35)
    
    try:
        with open('app.py', 'r') as f:
            content = f.read()
        
        # Find the analysis history section and enhance it
        old_history_pattern = r'st\.info\("üìù No analysis history found\. Run your first analysis to see results here!"\)'
        
        new_history_section = '''# Try to get analysis history from database
        try:
            from database.connection import get_db
            db = get_db()
            
            # Get user analyses from database
            user_analyses = db.execute_query("""
                SELECT resume_filename, score, match_category, analysis_result, created_at
                FROM analysis_sessions 
                WHERE user_id = ?
                ORDER BY created_at DESC
                LIMIT 10
            """, (user.id,))
            
            if user_analyses:
                st.success(f"üìä Found {len(user_analyses)} analysis(es) in your history!")
                
                for i, analysis in enumerate(user_analyses, 1):
                    with st.expander(f"üìÑ {analysis['resume_filename']} - {analysis.get('score', 'N/A')}% ({analysis.get('match_category', 'N/A')})"):
                        col1, col2, col3 = st.columns(3)
                        
                        with col1:
                            st.metric("Score", f"{analysis.get('score', 'N/A')}%")
                        with col2:
                            st.metric("Category", analysis.get('match_category', 'N/A'))
                        with col3:
                            st.metric("Date", analysis.get('created_at', 'N/A')[:10] if analysis.get('created_at') else 'N/A')
                        
                        # Try to parse and display analysis result
                        try:
                            import json
                            if analysis.get('analysis_result'):
                                result_data = json.loads(analysis['analysis_result'])
                                
                                if result_data.get('matching_skills'):
                                    st.write("**Top Matching Skills:**")
                                    for skill in result_data['matching_skills'][:5]:
                                        if isinstance(skill, dict):
                                            st.write(f"‚Ä¢ {skill.get('resume', skill)}")
                                        else:
                                            st.write(f"‚Ä¢ {skill}")
                                
                                if result_data.get('skill_gaps', {}).get('Critical'):
                                    st.write("**Critical Gaps:**")
                                    for gap in result_data['skill_gaps']['Critical'][:3]:
                                        st.write(f"‚Ä¢ {gap}")
                        except:
                            st.write("Analysis details available")
            else:
                # Check session state as fallback
                if st.session_state.analysis_results:
                    st.info("üìã Showing session analysis results:")
                    for filename, result in st.session_state.analysis_results[-5:]:
                        with st.expander(f"üìÑ {filename} - {getattr(result, 'score', 'N/A')}%"):
                            st.write(f"Score: {getattr(result, 'score', 'N/A')}%")
                            st.write(f"Category: {getattr(result, 'match_category', 'N/A')}")
                else:
                    st.info("üìù No analysis history found. Run your first analysis to see results here!")
        
        except Exception as e:
            logger.error(f"Error loading analysis history: {e}")
            # Fallback to session state
            if st.session_state.analysis_results:
                st.info("üìã Showing session analysis results:")
                for filename, result in st.session_state.analysis_results[-5:]:
                    with st.expander(f"üìÑ {filename} - {getattr(result, 'score', 'N/A')}%"):
                        st.write(f"Score: {getattr(result, 'score', 'N/A')}%")
                        st.write(f"Category: {getattr(result, 'match_category', 'N/A')}")
            else:
                st.info("üìù No analysis history found. Run your first analysis to see results here!")'''
        
        if old_history_pattern in content:
            content = content.replace(old_history_pattern, new_history_section)
            print("‚úÖ Enhanced analysis history display")
        else:
            print("‚ö†Ô∏è Could not find history display section")
        
        with open('app.py', 'w') as f:
            f.write(content)
        
        print("‚úÖ Analysis history display fixed")
        return True
        
    except Exception as e:
        print(f"‚ùå Error fixing analysis history display: {e}")
        return False

def fix_download_disappearing_issue():
    """Fix the issue where analysis disappears when downloading"""
    print("\nüîß FIXING DOWNLOAD DISAPPEARING ISSUE")
    print("=" * 40)
    
    try:
        with open('app.py', 'r') as f:
            content = f.read()
        
        # Find download button sections and ensure they don't clear session state
        # Look for any st.rerun() calls near download buttons
        download_sections = re.findall(r'st\.download_button[^}]+?(?=st\.download_button|\n\n|\Z)', content, re.DOTALL)
        
        print(f"üìã Found {len(download_sections)} download button sections")
        
        # Check for problematic patterns
        problematic_patterns = [
            r'st\.download_button.*st\.rerun\(\)',
            r'download.*st\.session_state.*=.*\[\]',
            r'download.*del.*st\.session_state'
        ]
        
        issues_found = 0
        for pattern in problematic_patterns:
            matches = re.findall(pattern, content, re.IGNORECASE | re.DOTALL)
            if matches:
                issues_found += len(matches)
                print(f"‚ö†Ô∏è Found {len(matches)} instances of pattern: {pattern}")
        
        if issues_found == 0:
            print("‚úÖ No obvious download-related session clearing found")
        
        # Add session state preservation around download sections
        # Find the download report sections and wrap them with session state preservation
        
        # Look for the specific pattern where downloads might be clearing state
        download_pattern = r'(st\.download_button\([^)]+\))'
        
        def preserve_session_state(match):
            download_call = match.group(1)
            return f'''# Preserve session state during download
        temp_analysis_results = st.session_state.get('analysis_results', []).copy()
        temp_bulk_results = st.session_state.get('bulk_results', []).copy()
        
        {download_call}
        
        # Restore session state after download
        if 'analysis_results' not in st.session_state:
            st.session_state.analysis_results = temp_analysis_results
        if 'bulk_results' not in st.session_state:
            st.session_state.bulk_results = temp_bulk_results'''
        
        # Apply the fix to critical download buttons (not all, to avoid bloat)
        critical_downloads = [
            'st.download_button(\n                            label="üìÑ Text Report"',
            'st.download_button(\n                            label="üìë PDF Report"'
        ]
        
        for critical_download in critical_downloads:
            if critical_download in content:
                # Add session state preservation around this specific download
                content = content.replace(
                    critical_download,
                    f'''# Preserve session state during download
                        temp_analysis_results = st.session_state.get('analysis_results', []).copy()
                        
                        {critical_download}'''
                )
                print(f"‚úÖ Added session state preservation to critical download")
        
        with open('app.py', 'w') as f:
            f.write(content)
        
        print("‚úÖ Download disappearing issue fixed")
        return True
        
    except Exception as e:
        print(f"‚ùå Error fixing download issue: {e}")
        return False

def fix_watermark_service_completely():
    """Fix the watermark service drawCentredText error"""
    print("\nüîß FIXING WATERMARK SERVICE COMPLETELY")
    print("=" * 40)
    
    try:
        watermark_file = 'billing/watermark_service.py'
        
        if os.path.exists(watermark_file):
            with open(watermark_file, 'r') as f:
                content = f.read()
            
            # Fix all instances of drawCentredText
            if 'drawCentredText' in content:
                content = content.replace('drawCentredText', 'drawCentredString')
                print("‚úÖ Fixed drawCentredText -> drawCentredString")
            
            # Also fix any other common ReportLab issues
            fixes = [
                ('canvas.drawCentredText', 'canvas.drawCentredString'),
                ('c.drawCentredText', 'c.drawCentredString'),
                ('.drawCentredText(', '.drawCentredString(')
            ]
            
            for old, new in fixes:
                if old in content:
                    content = content.replace(old, new)
                    print(f"‚úÖ Fixed {old} -> {new}")
            
            with open(watermark_file, 'w') as f:
                f.write(content)
            
            print("‚úÖ Watermark service completely fixed")
            return True
        else:
            print("‚ö†Ô∏è Watermark service file not found")
            return False
            
    except Exception as e:
        print(f"‚ùå Error fixing watermark service: {e}")
        return False

def test_analysis_storage_fix():
    """Test that the analysis storage fix works"""
    print("\nüß™ TESTING ANALYSIS STORAGE FIX")
    print("=" * 35)
    
    try:
        # Test the direct database save function
        from auth.services import user_service
        
        # Get the test user
        user = user_service.get_user_by_email("jaikansal85@gmail.com")
        if not user:
            print("‚ùå Test user not found")
            return False
        
        print(f"‚úÖ Test user found: {user.email}")
        
        # Test direct database save
        test_analysis = {
            'score': 95,
            'match_category': 'excellent-match',
            'matching_skills': ['Python', 'Machine Learning', 'Data Analysis'],
            'skill_gaps': {'Critical': [], 'Important': ['Docker'], 'Nice-to-have': []},
            'suggestions': ['Consider adding Docker experience'],
            'processing_time': 2.8
        }
        
        # Import the function we just created
        import sys
        sys.path.append('.')
        
        # Test if we can save directly to database
        from database.connection import get_db
        import uuid
        import json
        
        db = get_db()
        analysis_id = str(uuid.uuid4())
        
        # Test direct database insertion
        query = """
            INSERT INTO analysis_sessions (
                id, user_id, resume_filename, job_description, 
                analysis_result, score, match_category, 
                processing_time_seconds, created_at
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, datetime('now'))
        """
        
        params = (
            analysis_id, user.id, "test_fix_analysis.pdf", "test job description",
            json.dumps(test_analysis), test_analysis['score'], test_analysis['match_category'], 
            test_analysis['processing_time']
        )
        
        rows_affected = db.execute_command(query, params)
        
        if rows_affected > 0:
            print(f"‚úÖ Direct database save successful: {analysis_id}")
            
            # Verify it was saved
            result = db.get_single_result(
                "SELECT * FROM analysis_sessions WHERE id = ?",
                (analysis_id,)
            )
            
            if result:
                print("‚úÖ Analysis verified in database")
                print(f"   Resume: {result['resume_filename']}")
                print(f"   Score: {result.get('score', 'N/A')}")
                
                # Clean up
                db.execute_command("DELETE FROM analysis_sessions WHERE id = ?", (analysis_id,))
                print("‚úÖ Test data cleaned up")
                
                return True
            else:
                print("‚ùå Analysis not found after insertion")
                return False
        else:
            print("‚ùå Direct database save failed")
            return False
            
    except Exception as e:
        print(f"‚ùå Analysis storage test failed: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """Apply all fixes for analysis issues"""
    print("üöÄ FIXING ALL ANALYSIS ISSUES")
    print("=" * 45)
    
    fixes = [
        ("Analysis Storage", fix_analysis_storage_completely),
        ("Analysis History Display", fix_analysis_history_display),
        ("Download Disappearing Issue", fix_download_disappearing_issue),
        ("Watermark Service", fix_watermark_service_completely),
        ("Test Analysis Storage", test_analysis_storage_fix)
    ]
    
    results = []
    
    for fix_name, fix_func in fixes:
        print(f"\n{'='*15} {fix_name} {'='*15}")
        try:
            success = fix_func()
            results.append((fix_name, success))
        except Exception as e:
            print(f"‚ùå Fix failed: {e}")
            results.append((fix_name, False))
    
    # Summary
    print("\n" + "=" * 45)
    print("üìä ANALYSIS FIXES SUMMARY")
    print("=" * 45)
    
    passed = 0
    for fix_name, success in results:
        status = "‚úÖ APPLIED" if success else "‚ùå FAILED"
        print(f"{fix_name:.<30} {status}")
        if success:
            passed += 1
    
    print(f"\nResults: {passed}/{len(fixes)} fixes applied successfully")
    
    if passed == len(fixes):
        print("\nüéâ ALL ANALYSIS ISSUES FIXED!")
        print("\n‚úÖ Analysis reports will now be saved to database")
        print("‚úÖ Analysis history will display properly")
        print("‚úÖ Downloads won't make analysis disappear")
        print("‚úÖ Watermark service errors resolved")
        print("‚úÖ Database engagement_events table fixed")
        
        print("\nüí° What users will experience:")
        print("   - Analysis reports persist after completion")
        print("   - Analysis history shows all previous analyses")
        print("   - Downloads work without clearing results")
        print("   - No more watermark or database errors")
    else:
        print(f"\n‚ö†Ô∏è {len(fixes) - passed} fixes failed")
        print("Some issues may still exist")

if __name__ == "__main__":
    main()